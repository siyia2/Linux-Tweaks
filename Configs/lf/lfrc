## OPTIONS

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 5

# disable icons
set icons false

set truncatechar "…"

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"


## ENABLE FILE PREVIEWS WITH CTPV

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


## PROMPT COLORS

set promptfmt "
\033[48;2;35;38;39;38;2;28;220;156m  
\033[38;2;0;175;0;48;2;0;175;0m
\033[38;2;0;175;0;48;2;40;47;62m
\033[38;2;255;255;255m %w 
\033[38;2;0;175;62;48;2;58;67;89m
\033[33;150;150;255m %f 
\033[;38;2;0;175;48;49m\033[m"


## CUSTOM KEYBINDS

map <enter> open

map ~ shell

map <c-a> toggle-select-all

map <c-c> deselect-all;

cmd deselect-all :unselect;clear

cmd toggle-select-all :invert

map . set hidden!

map <f-9> $kitty &

# show the result of execution of previous commands
map ` !true

map m

# Map 'md' key to create a directory (mkdir)
map md mkdir

# Map 'mf' key to create a file (touch)
map mf mkfile

# Map 'ms' key to create a symlink
map ms mksymlink

# Map 'mh' key to create a hardlink
map mh mkhardlink

map * chmodx

map <c-f> finder

map <c-z> compress

map <c-x> extract

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete

map M toggle-mount


## BOOKMARKS

map <f-1> cd ~/
map <f-2> cd /mnt/D/
map <f-3> cd /run/media/


## COMMANDS



# CREATE SYMLINK

cmd mksymlink ${{
# Read link name from user
printf "Symlink name: "
read -r link_name

# Create symlink if name provided
if [ -n "$link_name" ]; then
    # Check if target exists
    [ -e "$fx" ] || {
        echo "Error: Target '$fx' does not exist." >&2
        lf -remote "send $id echo Error: Target '$fx' does not exist."
        exit 1
    }

    ln -s "$fx" "$link_name" || {
        echo "Error: Failed to create symlink." >&2
        lf -remote "send $id echo Error: Failed to create symlink."
        exit 1
    }

    echo "Symlink '$link_name' created successfully."
    lf -remote "send $id echo Symlink '$link_name' created successfully."
else
    echo "Error: No symlink name provided." >&2
    lf -remote "send $id echo Error: No symlink name provided."
    exit 1
fi
}}


# CREATE HARDLINK

cmd mkhardlink ${{
# Check if target file exists and is not a directory
	if ! [ -f "$fx" ]; then
	    echo "Error: '$fx' is not a regular file." >&2
	    lf -remote "send $id echo Error: '$fx' is not a regular file."
	    exit 1
	fi
	
	# Read link name from user
	printf "Hardlink name: "
	read -r link_name
	
	# Create hardlink if name provided
	if [ -n "$link_name" ]; then
	    ln "$fx" "$link_name" || {
	        echo "Error: Failed to create hardlink." >&2
	        lf -remote "send $id echo Error: Failed to create hardlink."
	        exit 1
	    }
	    echo "Hardlink '$link_name' created successfully."
	    lf -remote "send $id echo Hardlink '$link_name' created successfully."
	else
	    echo "Error: No hardlink name provided." >&2
	    lf -remote "send $id echo Error: No hardlink name provided."
	    exit 1
	fi
}}


# CREATE NEW DIRECTORY

cmd mkdir ${{
	printf "New Directory Name: "
	read ans
	mkdir $ans

}}


# CREATE NEW FILE

cmd mkfile ${{
	printf "New File Name: "
	read ans
	touch $ans
}}
	

# TOGGLE EXECUTABLE STATUS OF A FILE

cmd chmodx &{{
if [ -x "$fx" ]; then
    chmod u-x "$fx"
    #echo "Execution permission removed from $fx"
else
    chmod u+x "$fx"
    #echo "Execution permission granted to $fx"
fi

lf -remote "send $id reload"
lf -remote "send $id down"
}}


# FUZZY FILE FINDER

cmd finder $~/.config/lf/finder


# USE USB MOUNT PLUGIN FROM NNN

cmd toggle-mount $~/.config/lf/nmount $fx


# ARCHIVE MANAGEMENT

cmd compress $~/.config/lf/compress $fx

cmd extract ${{
	for f in $fx; do
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f" ;;
		*.tar.gz|*.tgz) tar xzvf "$f" ;;
		*.tar.xz|*.txz) tar xJvf "$f" ;;
		*.tar.zst|*.tzst) tar -xvf "$f" ;;
		*.zip) unzip "$f" ;;
		*.rar) unrar x "$f" ;;
		*.7z) 7z x "$f" ;;
		*) echo -e "\nFailed to extract '$f'...\n" ;;
	esac
	[ $? -eq 0 ] && lf -remote "send $id :reload"
done
}}

