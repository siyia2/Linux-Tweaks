# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
set sixel

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

set promptfmt "
\033[48;2;35;38;39;38;2;28;220;156m  
\033[38;2;0;175;0;48;2;0;175;0m
\033[38;2;0;175;0;48;2;40;47;62m
\033[38;2;255;255;255m %w 
\033[38;2;0;175;62;48;2;58;67;89m
\033[38;2;255;255;255m %f 
\033[;38;2;0;175;48;49m\033[m"

# leave some space at the top and the bottom of the screen
set scrolloff 5

set icons false

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true


map a toggle-select-all

cmd toggle-select-all :invert


map . set hidden!

map <f-9> $kitty &

# execute current file (must be executable)
#map x $$f
#map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

# Map 'n' key to create a directory (mkdir)
map N :push %mkdir<space>

# Map 'N' key to create a file (touch)
map n :push %touch<space>


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete

map l symlink

cmd symlink ${{
    set -f
    clear;
    printf "Symlink name: "
    read -r link_name
    if [ -n "$link_name" ]; then
        ln -sr "$fx" "$link_name"
    else
        lf -remote "send $id echo Failed to create symlink, no name provided"
    fi
}}

cmd chmodx &{{
	    if [ -x "$fx" ]; then
        chmod u-x "$fx"
        #echo "Execution permission removed from $fx"
    else
        chmod u+x "$fx"
        #echo "Execution permission granted to $fx"
    fi

    lf -remote "send $id reload"
}}

map * chmodx

cmd toggle-mount $~/.config/lf/nmount $fx
map M toggle-mount

map <f-1> cd ~/
map <f-2> cd /mnt/D/
map <f-3> cd /run/media/

map x extract

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar.zst|*.tzst) tar -xvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd targ ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd tarz ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.zst $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
