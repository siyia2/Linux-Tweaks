#!/bin/bash

mounted_isos=()

# Read propmt color and style
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

BOLD=$(tput bold)

# Main script
iso_count=1
iso_paths=()

# Function to mount an ISO file in parallel
mount_iso() {
	local iso_files=("$@")

	for iso_file in "${iso_files[@]}"; do
		while [ -e "/mnt/iso_$iso_count" ]; do
			((iso_count++)) # Increment iso_count until an available number is found
		done

		local mount_point
		for ((i = 1; ; i++)); do
			mount_point="/mnt/iso_$i"
			if [ ! -e "$mount_point" ]; then
				break
			fi
		done

		if [ -e "$mount_point" ]; then
			echo "An ISO is already mounted at '$mount_point'."
		else
			sudo mkdir -p "$mount_point"

			(
				# Subshell for parallel execution
				sudo mount -o loop "$iso_file" "$mount_point"
				echo "ISO file '$iso_file' mounted at '$mount_point'."
				mounted_isos+=("$mount_point") # Add the mount point to the list
			) &                             # Run the subshell in the background
		fi

	done

	# Wait for all background jobs to complete
	wait

	echo "All ISO files have been mounted."
	mounted_isos+=("$mount_point")
}

# Function to unmount a specific ISO or multiple ISOs in parallel
unmount_iso_parallel() {
	local found_mounted=false
	local iso_folders=()

	# List the mounted ISO folders in the "/mnt" directory with a limited search depth
	iso_folders=($(find /mnt -maxdepth 1 -type d -name "iso_*"))

	if [ ${#iso_folders[@]} -gt 0 ]; then
		found_mounted=true
	fi

	if [ "$found_mounted" = false ]; then
		echo -e "\e[1;31mNo mounted ISOs found.\e[0m"
		return
	fi

	# List the mounted ISOs
	echo "Mounted ISOs:"
	for ((i = 0; i < ${#iso_folders[@]}; i++)); do
		echo "$((i + 1)): ${iso_folders[i]}"
	done

	# Ask for user input
	read -r -p "Enter the number(s) of the ISO(s) to unmount (e.g., '1' or '1-3'): " unmount_selection

	# Unmount the selected ISOs in parallel and remove the folders
	if [[ "$unmount_selection" =~ ^[0-9]+(-[0-9]+)?$ ]]; then
		IFS='-' read -r -a range <<<"$unmount_selection"
		start="${range[0]}"
		end="${range[1]:-$start}"

		if [ "$start" -ge 1 ] && [ "$end" -le ${#iso_folders[@]} ] && [ "$start" -le "$end" ]; then
			for ((i = start - 1; i < end; i++)); do
				local selected_folder="${iso_folders[i]}"
				(
					sudo umount -l "$selected_folder"
					echo "ISO $((i + 1)) unmounted."
					# Remove the ISO folder after unmounting
					sudo rmdir -p "$selected_folder"
					echo "Folder $((i + 1)) removed."
				) & # Run the unmounting process in the background
			done

			# Wait for all background processes to finish
			wait
		else
			echo "Invalid selection. No action performed."
		fi
	else
		echo "Invalid selection. Please provide a valid ISO number or range."
	fi
}
# Function to unmount all ISOs in parallel
unmount_all_isos_parallel() {
	for ((i = 1; i < iso_count; i++)); do
		local mount_point="/mnt/iso_$i"
		if [ -e "$mount_point" ]; then
			(
				sudo umount -l "$mount_point"
				sudo rmdir "$mount_point"
			) & # Run the unmounting process in the background
		fi
	done

	# Wait for all background unmounting processes to complete
	wait

	echo "All mounted ISOs have been unmounted in parallel."
}

# Function to list either iso or bin and img files with numbers
list_iso_files() {

	while true; do
		# Prompt the user for a directory path
		read -p "${BOLD}${YELLOW}Enter a valid directory path${RESET}: " dir_path

		if [ ! -d "$dir_path" ]; then
			echo -e "\e[1;31mDirectory invalid $dir_path\e[0m"
		else
			break # Exit the loop if the directory is valid
		fi
	done

	case $choice in
	1)
		iso_files=()
		case $choice_small in
		1)
			# Use find with null character delimiter to handle spaces in file paths
			IFS=$'\n' read -d '' -r -a iso_files < <(find "$dir_path" -maxdepth 5 -type f -iname "*.iso" -print0 | xargs -0 -r -P "$(nproc)" realpath)
			;;

		*)
			echo -e "\e[1;31mInvalid choice.\e[0m"
			return
			;;
		esac

		if [ -z "${iso_files[*]}" ]; then
			echo -e "\e[1;33mNo .iso files were found under the specified path."
		else
			echo "List of files in '$dir_path' and its subdirectories (up to 5 levels deep) with numbers:"
			echo " "
			for ((i = 0; i < ${#iso_files[@]}; i++)); do
				echo "$((i + 1)): ${iso_files[i]}"
			done
			echo -e "\e[1;32m"
		fi
		;;
	*)
		echo -e "\e[1;31mInvalid choice.\e[0m"
		;;
	esac

}

select_and_mount_files_by_number() {
	local list=("$@")
	local selected=()
	local selected_numbers=()
	local input=""

	while true; do
		read -e -p "Enter the number(s) of the file(s) to select&mount (e.g., '1 }' or '1 3 5 }' or simply '}' to quit): " input

		# Split input by spaces
		read -a num_array <<<"$input"

		for num in "${num_array[@]}"; do
			if [ "$num" = "}" ]; then
				break 2 # Exit both inner and outer loops
			elif [[ "$num" =~ ^[0-9]+$ && "$num" -ge 1 && "$num" -le ${#list[@]} ]]; then
				if ! [[ " ${selected_numbers[*]} " =~ " $num " ]]; then
					selected_numbers+=("$num")
					selected+=("${list[num - 1]}")
				else
					echo "Number $num has already been selected."
				fi
			else
				echo "Invalid number: $num"
			fi
		done
	done

	# Mount the selected files
	for file in "${selected[@]}"; do
		if [ -e "$file" ]; then
			mount_iso "$file"
		else
			echo "The specified file '$file' does not exist, no ISO mounted..."
		fi
	done
}

list_img_and_bin_files() {
	local dir_path="$1"

	# Check if the provided path is a valid directory
	if [ ! -d "$dir_path" ]; then
		echo -e "\e[1;31mInvalid directory path: $dir_path\e[0m"
		return
	fi

	case $choice in
	4)
		img_bin_files=()
		case $choice_small in
		1)
			# Use find with null character delimiter to handle spaces in file paths
			IFS=$'\n' read -d '' -r -a img_bin_files < <(find "$dir_path" -maxdepth 5 -type f \( -iname "*.img" -o -iname "*.bin" \) -size +50000c -print0 | xargs -0 -r -P "$(nproc)" realpath)
			;;

		*)
			echo -e "\e[1;31mInvalid choice.\e[0m"
			return
			;;
		esac

		;;
	*)
		echo -e "\e[1;31mInvalid choice.\e[0m"
		;;
	esac
}

select_and_convert_files_by_number() {
	local dir_path="$1"

	# Check if the directory exists and is accessible
	if [ ! -d "$dir_path" ] || [ ! -r "$dir_path" ]; then
		echo -e "\e[1;31mError: The specified directory does not exist or is not accessible.\e[0m"
		return
	fi

	# List .img and .bin files that meet specific criteria
	list_img_and_bin_files "$dir_path"

	if [ -z "${img_bin_files[*]}" ]; then
		echo -e "\e[1;31mNo .img or .bin files over 50MB were found.\e[0m"
		return
	fi
	# Prompt the user to select files by number

	while true; do
		echo "List of .img and .bin files over 50MB in '/mnt/D' and its subdirectories (up to 5 levels deep), select files for conversion (e.g., 1 2 3), or 'q' to quit:"
		echo " "
		for ((i = 0; i < ${#img_bin_files[@]}; i++)); do
			echo "$((i + 1)): ${img_bin_files[i]}"
		done

		# Reset the selection each time the loop iterates.
		selected=()
		echo " "
		read -p "Enter your selections for ISO conversions (e.g. 1 } or 1 2 3 } or simply '}' to quit), : " input

		# Split the user's input into an array of selections, separated by spaces.
		IFS=" " read -ra user_selections <<<"$input"

		for selection in "${user_selections[@]}"; do
			if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -le "${#img_bin_files[@]}" ]; then
				selected+=("${img_bin_files[$selection - 1]}")
				echo "Selected: ${img_bin_files[$selection - 1]}"
			elif [ "$selection" == "}" ]; then
				break 2
			else
				echo "Invalid selection. Enter the numbers of the files to select, separated by spaces, or 'q' to quit."
			fi
		done

	done

	if [ ${#selected[@]} -eq 0 ]; then
		echo -e "\e[1;33mNo files were selected for conversion.\e[0m"
		return
	fi

	# Call convert_to_iso to convert the selected files to ISO format
	convert_to_iso "${selected[@]}"
}

# Function to convert image files to ISO
convert_to_iso() {
	local input_paths=("$@")
	for input_path in "${input_paths[@]}"; do
		if [ -e "$input_path" ]; then
			if [[ "$input_path" == *.iso ]]; then
				echo -e "\e[1;33mThe file '$input_path' is already in ISO format.\e[0m"
			else
				if command -v ccd2iso &>/dev/null; then
					local output_path="${input_path%.*}.iso"
					ccd2iso "$input_path" "$output_path"
					if [ -e "$output_path" ]; then
						echo -e "\e[1;32mImage file converted to ISO: $output_path\e[0m"
						echo " "
					else
						echo -e "\e[1;31mConversion of '$input_path' failed.\e[0m"
					fi
				else
					echo -e "\e[1;33mccd2iso is not installed. Please install it before using this option.\e[0m"
				fi
			fi
		else
			echo -e "\e[1;31mThe specified input file '$input_path' does not exist.\e[0m"
		fi
	done
}

# Function to pause and wait for a key press
pause() {

	read -r -e -p "Press any key to continue...
"
	echo " "
}

# Array to store the list of mounted ISOs
mounted_isos=()
clear
while true; do

	clear
	
	echo -e '\e[1;32m _____          ___ _____ _____   ___ __   __  ___  _____ _____   __   __  ___ __   __ _   _ _____ _____ ____          _   ____   ___  
|  ___)   /\   (   |_   _)  ___) (   )  \ /  |/ _ \|  ___)  ___) |  \ /  |/ _ (_ \ / _) \ | (_   _)  ___)  _ \        / | |  __) / _ \ 
| |_     /  \   | |  | | | |_     | ||   v   | |_| | |   | |_    |   v   | | | |\ v / |  \| | | | | |_  | |_) )  _  __- | | |__ | | | |
|  _)   / /\ \  | |  | | |  _)    | || |\_/| |  _  | |   |  _)   | |\_/| | | | | | |  |     | | | |  _) |  __/  | |/ /| | |___ \| | | |
| |___ / /  \ \ | |  | | | |___   | || |   | | | | | |   | |___  | |   | | |_| | | |  | |\  | | | | |___| |     | / / | |_ ___) ) |_| |
|_____)_/    \_(___) |_| |_____) (___)_|   |_|_| |_|_|   |_____) |_|   |_|\___/  |_|  |_| \_| |_| |_____)_|     |__/  |_(_|____/ \___/ 
                                                                                                                                       \e[0m'
	
	echo "1. Mount ISO(s) (separate paths with space)"
	echo "2. Unmount ISO(s) (e.g., '1' or '1-2')"
	echo "3. Unmount all ISOs"
	echo "4. Convert IMG(s) to ISO(s) (separate paths with space)"
	echo "5. Open /mnt/"
	echo "6. Exit"
	read -r -e -p "${YELLOW}Choose an option (1/2/3/4/5/6):${RESET}${BOLD} " choice

	case $choice in
	1)
		while true; do
			read -r -e -p "${YELLOW}Press '1' for List Mode '2' for Manual Mode, or 'q' quit:${RESET}${BOLD} " choice_small

			if [[ "$choice_small" == 1 ]]; then
				echo -e "\e[1;34mOperating On List Mode\e[0m"

				list_iso_files "$dir_path"
				selected_files=($(select_and_mount_files_by_number "${iso_files[@]}"))
			elif [[ "$choice_small" == 2 ]]; then
				echo -e "\e[1;34mOperating On Manual Mode\e[0m"
				read -r -e -p "${YELLOW}Enter path(s) of ISO files (separate with spaces), or press enter to quit:${RESET}${BOLD} " iso_paths
				# Remove double quotes from the beginning and end of the string, if they exist
				iso_paths="${iso_paths%\"}"
				iso_paths="${iso_paths#\"}"
				# Split the input string into an array based on spaces
				IFS=" " read -a selected_files <<<"$iso_paths"
			elif [[ "$choice_small" == q ]]; then
				echo "Exiting..."
				break
			else
				echo -e "\e[1;31mInvalid Choice\e[0m"
			fi

			for iso_path in "${selected_files[@]}"; do
				if [ -e "$iso_path" ]; then
					mount_iso "$iso_path"
				fi
			done

		done
		;;
	2)
		unmount_iso_parallel
		pause
		;;
	3)
		if [ $iso_count -eq 1 ]; then
			echo -e "\e[1;33mNo ISOs are mounted, but cleaning mount dirs just in case...\e[0m"
			sudo umount -l /mnt/iso_*
			sudo rm -r /mnt/iso_*
		else
			unmount_all_isos_parallel
			iso_count=1
			mounted_isos=()
		fi
		pause
		;;
	4)
		while true; do
			read -r -e -p "${YELLOW}Press '1' for List Mode, '2' for Manual Mode, or 'q' to quit:${RESET}${BOLD} " choice_small

			if [[ "$choice_small" == 1 ]]; then
				echo -e "\e[1;34mOperating On List Mode\e[0m"
				read -r -e -p "${YELLOW}Enter directory path for BIN/IMG list generation:${RESET}${BOLD} " dir_path
				# Prompt the user to select files in List Mode
				select_and_convert_files_by_number "$dir_path"

				# Clear the selected array to avoid double conversions
				selected=()

			elif [[ "$choice_small" == 2 ]]; then
				echo -e "\e[1;34mOperating On Manual Mode\e[0m"
				read -r -e -p "${YELLOW}Enter image file(s) path(s) you want to convert (separate with spaces), or press enter to quit:${RESET}${BOLD} " input_paths

				# Remove double quotes from the beginning and end of the string, if they exist
				input_paths="${input_paths%\"}"
				input_paths="${input_paths#\"}"

				# Split the input string into an array based on spaces
				IFS=" " read -a input_paths <<<"$input_paths"

				# Perform the conversion for Manual Mode
				convert_to_iso "${input_paths[@]}"
			elif [[ "$choice_small" == q ]]; then
				echo "Exiting..."
				break
			else
				echo -e "\e[1;31mInvalid choice. Please enter '1' or '2'.\e[0m"
			fi
		done

		;;
	5)
		nohup xdg-open /mnt/ >/dev/null 2>&1 &
		read -r -p "Press Enter to return to the main menu..."
		;;
	6)
		echo "Exiting the program."
		exit 0
		;;
	*)
		echo -e "\e[1;31mInvalid choice. Please enter 1, 2, 3, 4, 5 or 6.\e[0m"
		pause
		;;
	esac
done
